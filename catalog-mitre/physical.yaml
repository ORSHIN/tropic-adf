---
# Physical Threats

#
# This file represents the MITRE EM3ED Hardware Device Threat Cathegory
#

sca_power_spa:
  a: Secret-dependent operations lead to secret extraction through measuring power consumption
  d:
    Constant-time/flow implementation: []
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, SPA]

sca_power_spa_exponentiation:
  a: Key-dependent exponentiation leads to single-trace key extraction through measuring power consumption
  d:
    Constant-time/flow implementation: [Square and multiply always, Montgomery ladder]
  surf: [Cryptographic Algorithm Implementation, RSA, RSA Exponentiation, private key]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Power Side-Channel, SPA]

sca_em_spa_exponentiation:
  a: Key-dependent exponentiation leads to single-trace key extraction through measuring electromagnetic emanations
  d:
    Constant-time/flow implementation: [Square and multiply always, Montgomery ladder]
    Add security sensors: [EM proximity sensor]
  surf: [Cryptographic Algorithm Implementation, RSA, RSA Exponentiation, private key]
  vect: [Side-Channel Attack, Electromagnetic Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Electromagnetic Side-Channel, SPA]

sca_power_spa_multiplication:
  a: Key-dependent multiplication leads to key extraction through measuring power consumption
  d:
    Constant-time/flow implementation: [Double and add always, Montgomery ladder]
  surf: [Cryptographic Algorithm Implementation, ECC, ECC Multiplication, private key]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Power Side-Channel, SPA]

sca_em_spa_multiplication:
  a: Key-dependent multiplication leads to key extraction through measuring electromagnetic emanations
  d:
    Constant-time/flow implementation: [Double and add always, Montgomery ladder]
    Add security sensors: [EM proximity sensor]
  surf: [Cryptographic Algorithm Implementation, ECC, ECC Multiplication, private key]
  vect: [Side-Channel Attack, Electromagnetic Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Electromagnetic Side-Channel, SPA]

sca_power_dpa:
  a: Correlation between power consumption and key material in an unprotected cryptographic implementation leads to key extraction
  d:
    Decouple the power consumption from the key: [Data randomization, Masking, Blinding]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Power Side-Channel, DPA, CPA]

sca_em_dpa:
  a: Correlation between electromagnetic emanations and key material in an unprotected cryptographic implementation leads to key extraction
  d:
    Decouple the electromagnetic emanations from the key: [Data randomization, Masking, Blinding]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Electromagnetic Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Electromagnetic Side-Channel, DPA, CPA]

sca_power_2ndorder_dpa:
  a: Second order correlation between power consumption and key material in a first-order protected cryptographic implementation leads to key extraction
  d:
    Decouple the power consumption from the key: [Second order masking]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Power Side-Channel, DPA, CPA]

sca_em_2ndorder_dpa:
  a: Second order correlation between electromagnetic emanations and key material in a first-order protected cryptographic implementation leads to key extraction
  d:
    Decouple the electromagnetic emanations from the key: [Second order masking]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Electromagnetic Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Electromagnetic Side-Channel, DPA, CPA]

sca_power_higherorder_dpa:
  a: Nth order correlation between power consumption and key material in an (n-1)-order protected cryptographic implementation leads to key extraction
  d:
    Decouple the power consumption from the key: [nth-order masking]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Power Side-Channel, DPA, CPA]

sca_em_higherorder_dpa:
  a: Nth order correlation between electromagnetic emanations and key material in an (n-1)-order protected cryptographic implementation leads to key extraction
  d:
    Decouple the electromagnetic emanations from the key: [nth-order masking]
    Decrease signal-to-noise ratio: [Instruction shuffling, Dummy instructions, Clock jitter, Increase parallel activity]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Electromagnetic Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack, Electromagnetic Side-Channel, DPA, CPA]

sca_alignment:
  a: Misaligned traces can be aligned using alignment techniques
  d:
    Randomize waveform shape: [Current scrambling]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Side-Channel Attack, Power Side-Channel Attack]
  model: [Physical, Passive]
  tag: [Implementation Attack, Side-Channel Attack]

# Physical fault Attacks
fi_voltage_instructionskip:
  a: Voltage glitching leads to instruction skip
  d:
    Harden computations: [Information redundancy, Parallel computations]
    Add security sensors: [Voltage sensor]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Controller Implementation]
  vect: [Fault Attack, Voltage Glitching, Laser]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_clock_instructionskip:
  a: Clock glitching leads to instruction skip
  d:
    Harden computations: [Information redundancy, Parallel computations]
    Add security sensors: [Clock sensor]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Controller Implementation]
  vect: [Fault Attack, Clock Glitching, Laser]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_laser_instructionskip:
  a: Laser fault injection leads to instruction skip
  d:
    Harden computations: [Information redundancy, Parallel computations]
    Add security sensors: [Light sensor, Temperature sensor]
    Hide sensitive parts of the chip: [Glue logic]
    Add shielding: [Metal layers]
    Use modern technology: [Smaller technology, 3D packaging]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Controller Implementation]
  vect: [Fault Attack, Laser Fault Injection, Laser]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_em_instructionskip:
  a: Electromagnetic fault injection leads to instruction skip
  d:
    Harden computations: [Information redundancy, Parallel computations]
    Hide sensitive parts of the chip: [Glue logic]
    Add shielding: [Metal layers]
    Add security sensors: [EM proximity sensor]
    Use modern technology: [Smaller technology, 3D packaging]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Controller Implementation]
  vect: [Fault Attack, Electromagnetic Fault Injection, Laser]
  model: [Physical, Active]
  tag: [Implementation Attack]

dfa:
  a: Differential fault analysis
  d:
    Hardware fault tolerance: [Spatial/temporal redundancy, Register ECC, Hardened PC, Hardened CSRs]
    Software implemented fault tolerance: [Redundant execution, Control flow integrity enforcement]
    Fault injection testing: [FI simulation, FI emulation, Software FI]
    Security alerts: [Major alert, Minor alert]
  surf: [Microprocessor, Cryptographic Operation]
  vect: [Fault Injection, Bus tampering]
  model: [Physical Access, Active]
  tag: [Implementation Attack]

fi_voltage_dfa:
  a: Voltage Glitching causes fault leading to key extraction using differential fault analysis
  d:
    Harden computations: [Ineffective computations]
    Add security sensors: [Voltage sensor]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Fault Attack, Voltage Glitching, DFA]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_clock_dfa:
  a: Clock glitching causes fault leading to key extraction using differential fault analysis
  d:
    Harden computations: [Ineffective computations]
    Add security sensors: [Clock sensor]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Fault Attack, Clock Glitching, DFA]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_laser_dfa:
  a: Laser fault injection causes fault leading to key extraction using differential fault analysis
  d:
    Harden computations: [Ineffective computations]
    Add security sensors: [Light sensor, Temperature sensor]
    Hide sensitive parts of the chip: [Glue logic]
    Add shielding: [Metal layers]
    Use modern technology: [Smaller technology, 3D packaging]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Fault Attack, Laser Fault Injection, DFA]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_em_dfa:
  a: Electromagnetic fault injection causes fault leading to key extraction using differential fault analysis
  d:
    Harden computations: [Ineffective computations]
    Hide sensitive parts of the chip: [Glue logic]
    Add shielding: [Metal layers]
    Add security sensors: [EM proximity sensor]
    Use modern technology: [Smaller technology, 3D packaging]
    Hide critical operations: [Instruction shuffling, Dummy instructions, Clock jitter]
  surf: [Cryptographic Algorithm Implementation]
  vect: [Fault Attack, Electromagnetic Fault Injection, DFA]
  model: [Physical, Active]
  tag: [Implementation Attack]

fi_dbg:
  a: Enabling debug interface via fault injection
  d:
    Hardware fault tolerance: [Spatial/temporal redundancy, Register ECC, Hardened PC, Hardened CSRs]
    Software implemented fault tolerance: [Redundant execution, Control flow integrity enforcement]
    Fault injection testing: [FI simulation, FI emulation, Software FI]
  surf: [MCU, Firmware, Debug Interface]
  vect: [Fault Injection, Instruction Skip, Control Flow Modification]
  model: [Physical Access, Active]
  tag: [Implementation Attack]

bus_tampering:
  a: Bus transaction injection
  d:
    Security alerts: [Major alert, Minor alert]
    Bus protocol hardening: [Bus handshake signals, Bus integrity signals]
  surf: [SoC, Bus Interface]
  vect: [Fault Injection, Communication Tampering, Signal Injection]
  model: [Physical Access, Active]
  tag: [Communication]

spectre:
  # Primary fields
  a: The CPU can execute instructions transiently (being reverted before their results are committed to the architectural state), sometimes operating on secret operands they were not supposed to access. Traces of these executions can leak the secret values.
  d:
    "preventing speculation altogether": ["Disabling speculation in the hardware"]
  surf: ["Speculative HW"]
  vect: ["Speculative Execution"]
  model: ["Remote Code Execution"]
  tag: ["Spectre"]
  # Optional fields
  year: 2018

spectre_pht:
  # Primary fields
  a: Transient execution that results from mispredicted conditional branches can cause persistent changes in the microarchitecture, which can be used to intentionally leak secrets from a victim process using a covert channel
  d:
    "preventing speculation altogether": ["Inserting fences at every branch", "Inserting fences at sensitive branches", "Disabling speculation in the hardware"]
    "preventing speculation on secrets": ["Implementing ProSpeCT or similar mechanisms in hardware", ...]
    "removing the covert channel": ["Cache partitioning", "Disabling hyperthreading", ...]
  surf: ["Speculative HW"]
  vect: ["PHT"]
  model: ["Remote Code Execution"]
  tag: ["Spectre"]
  # Optional fields
  year: 2018
  cve: ["CVE-2017-5753", "CVE-2017-5715"]

spectre_btb:
  # Primary fields
  a: Transient execution that results from mispredicted indirect branches can cause persistent changes in the microarchitecture, which can be used to intentionally leak secrets from a victim process using a covert channel
  d:
    "preventing speculation altogether": ["Inserting fences at every indirect jump", "Disabling speculation in the hardware"]
    "preventing speculation on secrets": ["Implementing ProSpeCT or similar mechanisms in hardware", ...]
    "removing the covert channel": ["Cache partitioning", "Disabling hyperthreading", ...]
  surf: ["Speculative HW"]
  vect: ["BTB"]
  model: ["Remote Code Execution"]
  tag: ["Spectre"]
  # Optional fields
  year: 2018
  cve: ["CVE-2017-5753", "CVE-2017-5715"]


spectre_rsb:
  # Primary fields
  a: Transient execution that results from mispredicted return instructions can cause persistent changes in the microarchitecture, which can be used to intentionally leak secrets from a victim process using a covert channel
  d:
    "preventing speculation altogether": ["Inserting fences at every return instruction", "Disabling speculation in the hardware"]
    "preventing speculation on secrets": ["Implementing ProSpeCT or similar mechanisms in hardware", ...]
    "removing the covert channel": ["Cache partitioning", "Disabling hyperthreading", ...]
  surf: ["Speculative HW"]
  vect: ["RSB"]
  model: ["Remote Code Execution"]
  tag: ["Spectre"]
  # Optional fields
  year: 2018
  cve: ["CVE-2017-5753", "CVE-2017-5715"]


spectre_stl:
  # Primary fields
  a: Transient execution that results from mispredicted store-to-load dependencies can cause persistent changes in the microarchitecture, which can be used to intentionally leak secrets from a victim process using a covert channel
  d:
    "preventing speculation altogether": ["Inserting fences at every load", "Inserting fences at sensitive loads", "Disabling store-to-load speculation in the hardware"]
    "preventing speculation on secrets": ["Implementing ProSpeCT or similar mechanisms in hardware", ...]
    "removing the covert channel": ["Cache partitioning", "Disabling hyperthreading", ...]
  surf: ["Speculative HW"]
  vect: ["Speculative Execution"]
  model: ["Remote Code Execution"]
  tag: ["Spectre"]
  # Optional fields
  year: 2018
  cve: ["CVE-2017-5753", "CVE-2017-5715"]
